import e from"peerjs";import t from"automerge";export default class{constructor(n,o={}){this._connections={},this._actorId=n,this.peer=o.peer||new e(this._actorId),this.docSet=o.docSet||new t.DocSet,this._encode=o.encode||JSON.stringify,this._decode=o.decode||JSON.parse,this.peer.on("connection",e=>{this._connections[e.peer]||this.connect(e.peer,e)})}connect(e,n,o){if(this._connections[e])return this.peer.connections[e];const c=n||this.peer.connect(e,o),s=this._connections[e]=new t.Connection(this.docSet,e=>{c.send(this._encode(e))}),r=e=>s.receiveMsg(this._decode(e)),i=()=>{c.off("data",r),this._connections[e]&&(delete this._connections[e],s.close())};return c.on("data",r),c.on("close",i),c.on("error",i),s.open(),c}get(e){return this.docSet.getDoc(e)||t.init(this._actorId)}select(e){return(t,...n)=>{const o=t(this.get(e),...n);return this.docSet.setDoc(e,o),o}}subscribe(e,t){if("function"==typeof e)return this.docSet.registerHandler(e),()=>this.docSet.unregisterHandler(e);if("string"==typeof e&&t){const n=(n,o)=>{n===e&&t(o)};return this.docSet.registerHandler(n),()=>this.docSet.unregisterHandler(n)}return()=>{}}}
//# sourceMappingURL=index.modern.js.map
